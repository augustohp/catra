#!/usr/bin/env node
// vim: et ts=4 sw=4 ft=javascript:

var environment = require('rc')
  , optmist = require('optimist')
  , stream = require('torrent-stream')
  , speaker = require('speaker')
  , lame = require('lame')
  , log = require('./src/Logger')
  , keypress = require('keypress')
  , Player = require('player')
  , fs = require('fs')

process.title = 'catra-song-streamer'
cli = optmist.usage('Usage: $0 <magnet-link>')
        .demand(1)
        .string('l').alias('l', 'log').describe('l', 'File path where logs will be sent to.')
        .boolean('v').alias('v', 'verbose').describe('v', 'Outputs **a lot** of messages.')
        .boolean('q').alias('q', 'quiet').describe('q', 'Only output emergencies.');

argv = environment('catra', {}, cli.argv);
log.configureFromCli(cli.argv);

var format = function(files) {
    var songList = [];
    files.forEach(function(file) {
        if (false === file.name.endsWith('.mp3')) {
            log.debug('Escaping "%s" for it is not playable.', file.name);
            return;
        }

        log.debug('Reconized "%s" as playable file.', file.name);
        songList.push({'name': file.name, 'stream': file});
    });
    return songList;
};

var player = null;
torrentFile = argv._[0];
log.debug('Start fetching "%s"', torrentFile);
var torrent = stream(torrentFile);
torrent.on('ready', function() {
    log.debug('Metadata from torrent received, listing playable files.')

    player = new Player(format(torrent.files))
      .on('downloading', function(song) {
        log.debug('im downloading... ');
        log.debug(song);
      })
      .on('playing', function(song) {
        log.notice('im playing... ' + song.name);
      })
      .on('playend', function(song) {
        log.debug('play done, switching to next one ...');
      })
      .on('error', function(err) {
        log.debug('Opps...!')
        log.debug(err);
      })
      .play()

    //Controls 
    // make `process.stdin` begin emitting "keypress" events
    keypress(process.stdin);

    var vol = 1

    function updateVolume() {
    player.setVolume(vol)
    log.debug('volume: ' + Math.floor(vol * 100))
    }

    var paused = false
    // listen for the "keypress" event
    process.stdin.on('keypress', function (ch, key) {
        if (key && key.ctrl && key.name == 'c') {
          process.exit(0)
        }
        if (key && key.name == 'space') {
          player.pause()
          if(!paused)
            log.debug('paused')
          else
            log.debug('resuming')
          paused = !paused
        }
        if (key && key.name == 'x') {
          player.stop()
          log.debug('stopped')
        }
        if (key && key.name == 's') {
          player.play()
          log.debug('playing')
        }
        if (key && key.name == 'up') {
          vol += 0.1;
          if(vol > 1) {
              vol = 1
          }
          updateVolume()
        }
        if (key && key.name == 'down') {
          vol -= 0.1;
          if(vol < 0) {
              vol = 0
          }
          updateVolume()
        }
        if (key && key.name == 'right') {
            player.next()
        }
        if (key && key.name == 'left') {
            player.previous()
        }
    });

    process.stdin.setRawMode(true)
    process.stdin.resume()
});

console.log('press "x" to stop, press "s" to play, press "space" to pause / resume')
console.log('press "Up" to increase volume, press "Down" to decrease volume')
console.log('press "->" to next song, press "<-" to previous song')
